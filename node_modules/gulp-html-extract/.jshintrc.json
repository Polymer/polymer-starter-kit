{
  // == Style Options ===================================================

  "indent"        : 2,        // Specify indentation spacing
  "maxerr"        : 100,      // Maximum errors before stopping.
  "maxlen"        : 80,
  "quotmark"      : "double", // Forces double quotes for strings
  "predef"        : [         // Extra globals.
    // Test
    "describe",
    "it",
    "before",
    "beforeEach",
    "after",
    "afterEach"
  ],

  // == Enforcing Options ===============================================

  // Turn on:
  "bitwise"       : true,     // Prohibit bitwise operators (&, |, ^, etc.).
  "camelcase"     : true,     // Force all variable names to use either camelCase style or UPPER_CASE with underscores.
  "curly"         : true,     // Require {} for every new block or scope.
  "eqeqeq"        : true,     // Require triple equals i.e. `===`.
  "forin"         : true,     // Tolerate `for in` loops without `hasOwnPrototype`.
  "immed"         : true,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
  "latedef"       : true,     // Prohibit variable use before definition.
  "newcap"        : true,     // Require capitalization of all constructor functions e.g. `new F()`.
  "noarg"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`.
  "noempty"       : true,     // Prohibit use of empty blocks.
  "nonew"         : true,     // Prohibit use of constructors for side-effects.
  "undef"         : true,     // Require all non-global variables be declared before they are used.
  "unused"        : true,     // Prohibit defined and never used variables.
  "trailing"      : true,     // Prohibit trailing whitespaces.

  // Turn off:
  "plusplus"      : false,    // Prohibit use of `++` & `--`.
  "regexp"        : false,    // Prohibit `.` and `[^...]` in regular expressions.
  "strict"        : false,    // Require `use strict` pragma in every file.

  // == Relaxing Options ================================================

  // Turn on (relax):
  "boss"          : true,     // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
  "globalstrict"  : true,     // Allow global "use strict" (also enables 'strict').
  "expr"          : true,     // Tolerate `ExpressionStatement` as Programs.

  // Turn off (enforce):
  "multistr"      : false,    // Tolerate multi-line strings.
  "asi"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).
  "debug"         : false,    // Allow debugger statements e.g. browser breakpoints.
  "eqnull"        : false,    // Tolerate use of `== null`.
  "es5"           : false,    // Allow EcmaScript 5 syntax.
  "esnext"        : false,    // Allow ES.next specific features such as `const` and `let`.
  "evil"          : false,    // Tolerate use of `eval`.
  "funcscope"     : false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
  "iterator"      : false,    // Allow usage of __iterator__ property.
  "lastsemic"     : false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
  "laxbreak"      : false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
  "laxcomma"      : false,    // Suppress warnings about comma-first coding style.
  "loopfunc"      : false,    // Allow functions to be defined within loops.
  "onecase"       : false,    // Tolerate switches with just one case.
  "proto"         : false,    // Tolerate __proto__ property. This property is deprecated.
  "regexdash"     : false,    // Tolerate unescaped last dash i.e. `[-...]`.
  "scripturl"     : false,    // Tolerate script-targeted URLs.
  "smarttabs"     : false,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
  "shadow"        : false,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.
  "sub"           : false,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
  "supernew"      : false,    // Tolerate `new function () { ... };` and `new Object;`.
  "validthis"     : false,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.

  // == Environments ====================================================
  //
  // These options pre-define global variables that are exposed by
  // popular JavaScript libraries and runtime environmentsâ€”such as
  // browser or node.js.

  // Turn on:
  "node"          : true,     // Enable globals available when code is running inside of the NodeJS runtime environment.

  // Turn off:
  "browser"       : false,    // Standard browser globals e.g. `window`, `document`.
  "couch"         : false,    // Enable globals exposed by CouchDB.
  "devel"         : false,    // Allow development statements e.g. `console.log();`. As a general rule, we should not check in code with console.* statements. Use /*jshint devel:true*/ to override.
  "dojo"          : false,    // Enable globals exposed by Dojo Toolkit.
  "jquery"        : false,    // Enable globals exposed by jQuery JavaScript library.
  "mootools"      : false,    // Enable globals exposed by MooTools JavaScript framework.
  "nonstandard"   : false,    // Define non-standard but widely adopted globals such as escape and unescape.
  "prototypejs"   : false,    // Enable globals exposed by Prototype JavaScript framework.
  "rhino"         : false,    // Enable globals available when your code is running inside of the Rhino runtime environment.
  "wsh"           : false,    // Enable globals available when your code is running as a script for the Windows Script Host.

  // == JSLint Legacy ===================================================
  //
  // These options are legacy from JSLint. Aside from bug fixes they will
  // not be improved in any way and might be removed at any point.

  "nomen"         : false,    // Prohibit use of initial or trailing underbars in names.
  "onevar"        : false,    // Allow only one `var` statement per function.
  "passfail"      : false,    // Stop on first error.
  "white"         : true      // Check against strict whitespace and indentation rules.
}